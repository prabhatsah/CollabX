// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: audit.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "audit";

export interface GetLogsRequest {
  limit: number;
}

export interface Organization {
  orgId: string;
  orgName: string;
  role: string;
}

export interface AuditPayload {
  email: string;
  message: string;
  event: string;
  timestamp: string;
  success: boolean;
  fullName: string;
  organizations: Organization[];
}

export interface AuditLogs {
  id: string;
  eventType: string;
  payload: AuditPayload | undefined;
  userId: string;
  orgId: string;
  ip: string;
  userAgent: string;
  createdAt: string;
}

export interface GetLogsResponse {
  auditLogs: AuditLogs[];
}

export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  /** true if service is running */
  serviceUp: boolean;
  /** true if DB is reachable */
  databaseConnected: boolean;
  /** true if all gRPC dependencies are healthy */
  dependenciesHealthy: boolean;
  /** optional human-readable status */
  statusMessage: string;
}

export const AUDIT_PACKAGE_NAME = "audit";

export interface AuditServiceClient {
  getLogs(request: GetLogsRequest): Observable<GetLogsResponse>;

  checkHealth(request: HealthCheckRequest): Observable<HealthCheckResponse>;
}

export interface AuditServiceController {
  getLogs(request: GetLogsRequest): Promise<GetLogsResponse> | Observable<GetLogsResponse> | GetLogsResponse;

  checkHealth(
    request: HealthCheckRequest,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
}

export function AuditServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getLogs", "checkHealth"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUDIT_SERVICE_NAME = "AuditService";
