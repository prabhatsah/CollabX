// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: support-ticket.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "supportticket";

export interface Empty {
}

export interface Ticket {
  id: string;
  orgId: string;
  title: string;
  description: string;
  createdByUserId: string;
  assigneeUserId: string;
  status: string;
  priority: string;
  createdAt: string;
  updatedAt: string;
}

export interface Comment {
  id: string;
  ticketId: string;
  orgId: string;
  authorUserId: string;
  body: string;
  createdAt: string;
}

export interface CreateTicketRequest {
  orgId: string;
  title: string;
  description: string;
  priority: string;
  createdByUserId: string;
}

export interface TicketResponse {
  ticket: Ticket | undefined;
}

export interface GetTicketRequest {
  orgId: string;
  ticketId: string;
}

export interface ListTicketsRequest {
  orgId: string;
  status: string;
  priority: string;
  assigneeUserId: string;
  /** pagination */
  limit: number;
  /** pagination */
  cursor: string;
}

export interface ListTicketsResponse {
  tickets: Ticket[];
  nextCursor: string;
}

export interface AddCommentRequest {
  orgId: string;
  ticketId: string;
  body: string;
  authorUserId: string;
}

export interface CommentResponse {
  comment: Comment | undefined;
}

export interface AssignTicketRequest {
  orgId: string;
  ticketId: string;
  assigneeUserId: string;
  /** who assigns (for audit) */
  actorUserId: string;
}

export interface TransitionStatusRequest {
  orgId: string;
  ticketId: string;
  newStatus: string;
  actorUserId: string;
  /** optional */
  reason: string;
}

export const SUPPORTTICKET_PACKAGE_NAME = "supportticket";

export interface SupportTicketClient {
  createTicket(request: CreateTicketRequest): Observable<TicketResponse>;

  getTicket(request: GetTicketRequest): Observable<TicketResponse>;

  listTickets(request: ListTicketsRequest): Observable<ListTicketsResponse>;

  addComment(request: AddCommentRequest): Observable<CommentResponse>;

  assignTicket(request: AssignTicketRequest): Observable<TicketResponse>;

  transitionStatus(request: TransitionStatusRequest): Observable<TicketResponse>;

  /** optional: internal for gateway health */

  checkHealth(request: Empty): Observable<Empty>;
}

export interface SupportTicketController {
  createTicket(request: CreateTicketRequest): Promise<TicketResponse> | Observable<TicketResponse> | TicketResponse;

  getTicket(request: GetTicketRequest): Promise<TicketResponse> | Observable<TicketResponse> | TicketResponse;

  listTickets(
    request: ListTicketsRequest,
  ): Promise<ListTicketsResponse> | Observable<ListTicketsResponse> | ListTicketsResponse;

  addComment(request: AddCommentRequest): Promise<CommentResponse> | Observable<CommentResponse> | CommentResponse;

  assignTicket(request: AssignTicketRequest): Promise<TicketResponse> | Observable<TicketResponse> | TicketResponse;

  transitionStatus(
    request: TransitionStatusRequest,
  ): Promise<TicketResponse> | Observable<TicketResponse> | TicketResponse;

  /** optional: internal for gateway health */

  checkHealth(request: Empty): Promise<Empty> | Observable<Empty> | Empty;
}

export function SupportTicketControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createTicket",
      "getTicket",
      "listTickets",
      "addComment",
      "assignTicket",
      "transitionStatus",
      "checkHealth",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SupportTicket", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SupportTicket", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SUPPORT_TICKET_SERVICE_NAME = "SupportTicket";
