// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: user-org.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userorg";

/** -----------Session Messages begins ----------- */
export interface GetSessionRequest {
  authUserId: string;
}

export interface GetSessionResponse {
  userInfo: UserInfo | undefined;
  organizations: OrgSummary[];
  currentOrg: OrgSummary | undefined;
}

export interface UserInfo {
  id: string;
  authUserId: string;
  fullName: string;
  email: string;
}

export interface OrgSummary {
  id: string;
  name: string;
  /** user's role in org */
  role: string;
}

/** -----------User Org creation Messages begins ----------- */
export interface CreateUserAndOrgRequest {
  authUserId: string;
  organizationName: string;
  fullName: string;
  email: string;
}

export interface CreateUserAndOrgResponse {
  userId: string;
  organizationId: string;
  membershipId: string;
}

export interface GetOrganizationRequest {
  organizationId: string;
}

export interface GetOrganizationResponse {
  organizationId: string;
  organizationName: string;
  createdAt: string;
}

export interface GetUsersInOrgRequest {
  organizationId: string;
}

export interface GetUsersInOrgResponse {
  users: UserInOrg[];
}

export interface UserInOrg {
  userId: string;
  fullName: string;
  email: string;
  role: string;
}

/** -------------- Health check ----------------- */
export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  /** true if service is running */
  serviceUp: boolean;
  /** true if DB is reachable */
  databaseConnected: boolean;
  /** true if all gRPC dependencies are healthy */
  dependenciesHealthy: boolean;
  /** optional human-readable status */
  statusMessage: string;
}

export const USERORG_PACKAGE_NAME = "userorg";

export interface UserOrgServiceClient {
  /** Create user + organization + membership */

  createUserAndOrg(request: CreateUserAndOrgRequest): Observable<CreateUserAndOrgResponse>;

  /** Get organization details */

  getOrganization(request: GetOrganizationRequest): Observable<GetOrganizationResponse>;

  /** Get users in an organization */

  getUsersInOrg(request: GetUsersInOrgRequest): Observable<GetUsersInOrgResponse>;

  /** chck health */

  checkHealth(request: HealthCheckRequest): Observable<HealthCheckResponse>;

  /** Get session info */

  getSession(request: GetSessionRequest): Observable<GetSessionResponse>;
}

export interface UserOrgServiceController {
  /** Create user + organization + membership */

  createUserAndOrg(
    request: CreateUserAndOrgRequest,
  ): Promise<CreateUserAndOrgResponse> | Observable<CreateUserAndOrgResponse> | CreateUserAndOrgResponse;

  /** Get organization details */

  getOrganization(
    request: GetOrganizationRequest,
  ): Promise<GetOrganizationResponse> | Observable<GetOrganizationResponse> | GetOrganizationResponse;

  /** Get users in an organization */

  getUsersInOrg(
    request: GetUsersInOrgRequest,
  ): Promise<GetUsersInOrgResponse> | Observable<GetUsersInOrgResponse> | GetUsersInOrgResponse;

  /** chck health */

  checkHealth(
    request: HealthCheckRequest,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;

  /** Get session info */

  getSession(
    request: GetSessionRequest,
  ): Promise<GetSessionResponse> | Observable<GetSessionResponse> | GetSessionResponse;
}

export function UserOrgServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUserAndOrg", "getOrganization", "getUsersInOrg", "checkHealth", "getSession"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserOrgService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserOrgService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_ORG_SERVICE_NAME = "UserOrgService";
