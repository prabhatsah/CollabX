// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface CreateAuthUserRequest {
  email: string;
  password: string;
}

export interface CreateAuthUserResponse {
  authUserId: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ChangePasswordRequest {
  authUserId: string;
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success: boolean;
}

export interface VerifyTokenRequest {
  accessToken: string;
}

export interface VerifyTokenResponse {
  authUserId: string;
  valid: boolean;
  type: string;
}

/** -------------- Health check ----------------- */
export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  /** true if service is running */
  serviceUp: boolean;
  /** true if DB is reachable */
  databaseConnected: boolean;
  /** true if all gRPC dependencies are healthy */
  dependenciesHealthy: boolean;
  /** optional human-readable status */
  statusMessage: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  /** Create an auth user */

  createAuthUser(request: CreateAuthUserRequest): Observable<CreateAuthUserResponse>;

  /** Login with email/password */

  login(request: LoginRequest): Observable<LoginResponse>;

  /** Change password */

  changePassword(request: ChangePasswordRequest): Observable<ChangePasswordResponse>;

  /** Verify an access token (for API Gateway to validate requests) */

  verifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>;

  /** chck health */

  checkHealth(request: HealthCheckRequest): Observable<HealthCheckResponse>;
}

export interface AuthServiceController {
  /** Create an auth user */

  createAuthUser(
    request: CreateAuthUserRequest,
  ): Promise<CreateAuthUserResponse> | Observable<CreateAuthUserResponse> | CreateAuthUserResponse;

  /** Login with email/password */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Change password */

  changePassword(
    request: ChangePasswordRequest,
  ): Promise<ChangePasswordResponse> | Observable<ChangePasswordResponse> | ChangePasswordResponse;

  /** Verify an access token (for API Gateway to validate requests) */

  verifyToken(
    request: VerifyTokenRequest,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;

  /** chck health */

  checkHealth(
    request: HealthCheckRequest,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createAuthUser", "login", "changePassword", "verifyToken", "checkHealth"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
